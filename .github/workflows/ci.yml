name: 'mariogame CI'

on: [push, workflow_dispatch]
env:
  aws_region: us-east-1
  ecr_uri: 563763293556.dkr.ecr.us-east-1.amazonaws.com/mariogame

jobs:
  login:
    name: Continuous Integration
    environment: production
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.aws_region }}
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    - name: Docker Build
      id: docker_build
      run: |
        cd ecs
        docker build -t ${{ env.ecr_uri }}:latest .
    - name: Vision One Container Security Scan
      run: |
        cd tmas && chmod +x tmas_install.sh && ./tmas_install.sh
        export TMAS_API_KEY=${{ secrets.TMAS_API_KEY }}
        docker save ${{ env.ecr_uri }}:latest > image.tar
        tmas scan docker-archive:image.tar --malwareScan --saveSBOM > result.json
        mv SBOM_* SBOM.json
        echo "TMAS Scan Result"
        cat result.json
    - name: 'Upload Scan Result Artifact'
      uses: actions/upload-artifact@v3
      with:
        name: scan-result
        path: tmas/result.json
        retention-days: 30
    - name: 'Upload SBOM Artifact'
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: tmas/SBOM.json
        retention-days: 30
    - name: Docker Tag and Push
      id: docker_push
      run: |
        docker tag ${{ env.ecr_uri }}:latest ${{ env.ecr_uri }}:${{ github.sha }}
        docker push ${{ env.ecr_uri }}:${{ github.sha }}
  deploy:      
    name: Continuous Delivery
    needs: login
    environment: production
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.aws_region }}
    
    
